// generated by coffee-script 1.9.2 - sorry

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    return define([], factory);
  } else if (typeof exports === 'object') {
    return module.exports = factory();
  } else {
    return window.pubsub = factory();
  }
})(function() {
  var _invokeCallbacks, pub, pubs, sub, subOnce, subscriptions, unsub;
  var slice = [].slice;
  subscriptions = {};
  _invokeCallbacks = function() {
    var args, i, ref, results, ret, subs, topic;
    topic = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    subs = subscriptions[topic];
    if (!subs) {
      return;
    }
    i = subs.length;
    results = [];
    while (i--) {
      ret = (ref = subs[i]).callback.apply(ref, args);
      if (ret === "stop_sub_invocations") {
        break;
      } else {
        results.push(void 0);
      }
    }
    return results;
  };
  pub = function() {
    var args, j, len, ref, results, topic, topics;
    topics = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    ref = topics.split(" ");
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      topic = ref[j];
      results.push(_invokeCallbacks.apply(null, [topic].concat(slice.call(args))));
    }
    return results;
  };
  pubs = function() {
    var a, args, j, len, ref, results, topic, topics;
    topics = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    ref = topics.split(" ");
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      topic = ref[j];
      if (topic.indexOf(":") > -1) {
        a = topic.split(":");
        if (a[0][0] === "-") {
          a[0] = a[0].substring(1);
          _invokeCallbacks.apply(null, [a[0] + ":" + a[1]].concat(slice.call(args)));
          results.push(_invokeCallbacks.apply(null, [a[0], a[1]].concat(slice.call(args))));
        } else {
          _invokeCallbacks.apply(null, [a[0], a[1]].concat(slice.call(args)));
          results.push(_invokeCallbacks.apply(null, [a[0] + ":" + a[1]].concat(slice.call(args))));
        }
      } else {
        results.push(_invokeCallbacks.apply(null, [topic].concat(slice.call(args))));
      }
    }
    return results;
  };
  sub = function(topics, label, callback, priority) {
    var added, data, i, j, len, ref, subs, topic;
    if (!priority && typeof callback === "number") {
      priority = callback;
      callback = label;
      label = null;
    } else if (!priority && !callback) {
      callback = label;
      label = null;
    }
    if (priority == null) {
      priority = 10;
    }
    ref = topics.split(" ");
    for (j = 0, len = ref.length; j < len; j++) {
      topic = ref[j];
      added = false;
      if (subscriptions[topic] == null) {
        subscriptions[topic] = [];
      }
      data = {
        callback: callback,
        label: label,
        priority: priority
      };
      subs = subscriptions[topic];
      i = subs.length;
      while (i--) {
        if (subs[i].priority <= priority) {
          subs.splice(i + 1, 0, data);
          added = true;
          break;
        }
      }
      if (!added) {
        subscriptions[topic].unshift(data);
      }
    }
    return callback;
  };
  subOnce = function(topics, label, callback, priority) {
    var args, cbWrapper, fn, j, len, ref, topic;
    if (!priority && typeof callback === "number") {
      args = "noCtx";
      priority = callback;
      callback = label;
      label = null;
    } else if (!priority && !callback) {
      args = "noCtxAndPrio";
      callback = label;
      label = null;
    }
    if (priority == null) {
      priority = 10;
    }
    cbWrapper = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      unsub(topics, cbWrapper);
      return callback.apply(null, args);
    };
    ref = topics.split(" ");
    fn = function(topic) {
      if (args === "noCtx") {
        return sub(topic, cbWrapper, priority);
      } else if (args === "noCtxAndPrio") {
        return sub(topic, cbWrapper);
      } else {
        return sub(topic, label, cbWrapper, priority);
      }
    };
    for (j = 0, len = ref.length; j < len; j++) {
      topic = ref[j];
      fn(topic);
    }
    return cbWrapper;
  };
  unsub = function(topics, labelOrCB) {
    var i, j, len, ref, results, results1, subs, topic;
    if (!labelOrCB) {
      labelOrCB = topics;
      topics = null;
    }
    if (topics) {
      ref = topics.split(" ");
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        topic = ref[j];
        if (!subscriptions[topic]) {
          continue;
        }
        subs = subscriptions[topic];
        i = subs.length;
        results.push((function() {
          var results1;
          results1 = [];
          while (i--) {
            if (subs[i].label === labelOrCB || subs[i].callback === labelOrCB) {
              results1.push(subs.splice(i, 1));
            } else {
              results1.push(void 0);
            }
          }
          return results1;
        })());
      }
      return results;
    } else {
      results1 = [];
      for (topic in subscriptions) {
        subs = subscriptions[topic];
        i = subs.length;
        results1.push((function() {
          var results2;
          results2 = [];
          while (i--) {
            if (subs[i].label === labelOrCB || subs[i].callback === labelOrCB) {
              results2.push(subs.splice(i, 1));
            } else {
              results2.push(void 0);
            }
          }
          return results2;
        })());
      }
      return results1;
    }
  };
  return {
    emit: pub,
    pub: pub,
    emits: pubs,
    pubs: pubs,
    on: sub,
    sub: sub,
    once: subOnce,
    subOnce: subOnce,
    off: unsub,
    unsub: unsub
  };
});
